[
  {
    "title": "Design and Implement Portfolio Database Schema",
    "description": "Create comprehensive database schemas for portfolio tracking including assets, transactions, and portfolio management with support for different asset types and transaction methods",
    "details": "Extend the existing Drizzle ORM schema with new tables: 1) `assets` table with fields: id, userId, assetType (enum: gold, silver, stock, fund, crypto, eurobond), symbol, name, category, createdAt, updatedAt. 2) `transactions` table with fields: id, userId, assetId, transactionType (buy/sell), quantity, pricePerUnit, totalAmount, transactionDate, notes, createdAt, updatedAt. 3) Add indexes for performance optimization on userId, assetId, and transactionDate. 4) Implement proper foreign key relationships and constraints. 5) Create migration files using Drizzle's migration system. The schema must support both lot-based tracking (for precious metals) and FIFO accounting (for funds).",
    "status": "pending",
    "test_strategy": "Write unit tests for schema validation, test database migrations in development environment, verify foreign key constraints work correctly, and test data integrity with sample transactions",
    "priority": "high",
    "ordinal": 0,
    "task_group_id": "5e8652bd-04a5-498c-8252-713c4420f3ba",
    "parent_task_id": null,
    "ai_result": null,
    "id": "d5c9b930-93d8-434b-8afd-1ca04350e91f",
    "created_at": "2025-10-12T15:26:27.068139Z",
    "user_id": "user_33yE3LI8yux3dQNu00evvWeby6P",
    "subtasks": []
  },
  {
    "title": "Design and implement database schema for portfolio tracking",
    "description": "Create comprehensive database schemas for portfolios, assets, and transactions using Drizzle ORM with PostgreSQL. This includes defining proper relationships, constraints, and indexes to support the multi-asset portfolio tracking functionality.",
    "details": "Define three main tables: 1) portfolios (id, userId, name, baseCurrency, createdAt, updatedAt) 2) assets (id, portfolioId, assetType enum [GOLD, SILVER, STOCK, FUND, CRYPTO, EUROBOND], symbol, name, currentPrice, lastUpdated) 3) transactions (id, assetId, type enum [BUY, SELL], quantity, pricePerUnit, totalAmount, transactionDate, notes). Implement proper foreign key relationships and indexes for performance. Create migration files and ensure the schema supports both FIFO accounting for funds and specific lot identification for precious metals. Include validation constraints for positive quantities and prices.",
    "status": "pending",
    "test_strategy": "Write unit tests for schema validation, test database migrations up and down, verify foreign key constraints work correctly, and test data integrity with sample portfolio data.",
    "priority": "high",
    "ordinal": 0,
    "task_group_id": "37feadab-f40a-4295-987d-6837d37e03a9",
    "parent_task_id": null,
    "ai_result": null,
    "id": "d2605a09-8d62-4423-9aa6-aa587b7a422c",
    "created_at": "2025-10-12T15:33:42.553754Z",
    "user_id": "user_33yE3LI8yux3dQNu00evvWeby6P",
    "subtasks": []
  },
  {
    "title": "Implement Portfolio Management API Endpoints",
    "description": "Create secure RESTful API endpoints for managing portfolio transactions and assets with proper authentication and business logic",
    "details": "Develop API routes under `app/api/portfolio/`: 1) POST `/api/portfolio/transactions` - Add new transaction with validation for asset type, quantity, price. 2) GET `/api/portfolio/transactions` - Fetch user's transactions with filtering and pagination. 3) PUT `/api/portfolio/transactions/[id]` - Update existing transaction. 4) DELETE `/api/portfolio/transactions/[id]` - Delete transaction. 5) GET `/api/portfolio/assets` - Get user's asset summary with current holdings. 6) GET `/api/portfolio/performance` - Calculate and return portfolio performance metrics. All endpoints must use better-auth session validation, implement proper error handling, input validation with Zod schemas, and include business logic for calculating current holdings and profit/loss.",
    "status": "pending",
    "test_strategy": "Create integration tests for each endpoint, test authentication middleware, validate input sanitization, test error responses, and verify business logic calculations with mock data",
    "priority": "high",
    "ordinal": 1,
    "task_group_id": "5e8652bd-04a5-498c-8252-713c4420f3ba",
    "parent_task_id": null,
    "ai_result": null,
    "id": "93425d87-7121-4347-9fe5-95c3d967d9c5",
    "created_at": "2025-10-12T15:26:27.068148Z",
    "user_id": "user_33yE3LI8yux3dQNu00evvWeby6P",
    "subtasks": []
  },
  {
    "title": "Build API endpoints for portfolio and transaction management",
    "description": "Create RESTful API routes under app/api/portfolio/ to handle all CRUD operations for portfolios, assets, and transactions with proper authentication and authorization.",
    "details": "Implement the following endpoints: GET /api/portfolio - fetch user's portfolio summary, POST /api/portfolio/transactions - add new transaction, GET /api/portfolio/assets - list all assets with current values, DELETE /api/portfolio/transactions/[id] - remove transaction, PUT /api/portfolio/transactions/[id] - update transaction. Each endpoint must verify user authentication via better-auth session and ensure users can only access their own data. Implement business logic for calculating portfolio values, profit/loss, and handling different asset types. Add proper error handling, input validation using Zod schemas, and return consistent JSON responses.",
    "status": "pending",
    "test_strategy": "Create integration tests for each endpoint, test authentication middleware, verify proper error responses for unauthorized access, and test edge cases like selling more assets than owned.",
    "priority": "high",
    "ordinal": 1,
    "task_group_id": "37feadab-f40a-4295-987d-6837d37e03a9",
    "parent_task_id": null,
    "ai_result": null,
    "id": "abdca6fc-4be1-47d0-bd52-e4d9535c34cf",
    "created_at": "2025-10-12T15:33:42.553762Z",
    "user_id": "user_33yE3LI8yux3dQNu00evvWeby6P",
    "subtasks": []
  },
  {
    "title": "Build Dynamic Portfolio Dashboard Interface",
    "description": "Replace the static dashboard with a dynamic, data-driven interface showing portfolio summary, asset breakdown, and transaction history",
    "details": "Overhaul `app/dashboard/page.tsx` to create a comprehensive portfolio dashboard: 1) Portfolio summary cards showing total value, daily P&L, and performance metrics using shadcn/ui Card components. 2) Asset breakdown table with columns for asset name, quantity, average cost, current value, and P&L using shadcn/ui Table component. 3) Recent transactions list with filtering capabilities. 4) Responsive design for mobile and desktop. 5) Loading states and error handling for API calls. 6) Use Next.js Server Components for initial data loading and Client Components for interactive features. 7) Implement real-time updates when new transactions are added. The interface should handle different asset types and display appropriate information for each.",
    "status": "pending",
    "test_strategy": "Test responsive design across devices, verify data loading states, test error scenarios, validate calculations display correctly, and ensure proper user experience with loading indicators",
    "priority": "medium",
    "ordinal": 2,
    "task_group_id": "5e8652bd-04a5-498c-8252-713c4420f3ba",
    "parent_task_id": null,
    "ai_result": null,
    "id": "d2408db0-4be9-40d6-9c7d-c107f5010923",
    "created_at": "2025-10-12T15:26:27.068150Z",
    "user_id": "user_33yE3LI8yux3dQNu00evvWeby6P",
    "subtasks": []
  },
  {
    "title": "Develop portfolio calculation engine with FIFO and specific lot logic",
    "description": "Implement core business logic for calculating portfolio performance, profit/loss, and handling different cost basis methods (FIFO for funds, specific identification for other assets).",
    "details": "Create a lib/calculations.ts module with pure functions for: 1) calculatePortfolioValue() - aggregate current portfolio worth 2) calculateProfitLoss() - compute gains/losses with proper cost basis 3) processFIFOSale() - handle fund sales using first-in-first-out method 4) processSpecificLotSale() - allow users to select which lots to sell for precious metals 5) calculatePerformanceMetrics() - daily, weekly, monthly, yearly returns 6) convertCurrency() - support USD/TRY display options. Include comprehensive error handling for edge cases like insufficient holdings, invalid dates, and negative quantities. Make functions pure and testable with clear input/output contracts.",
    "status": "pending",
    "test_strategy": "Write comprehensive unit tests covering all calculation scenarios, test FIFO logic with multiple purchase dates, verify specific lot selection works correctly, and test currency conversion accuracy.",
    "priority": "medium",
    "ordinal": 2,
    "task_group_id": "37feadab-f40a-4295-987d-6837d37e03a9",
    "parent_task_id": null,
    "ai_result": null,
    "id": "a234b3b8-f6bb-4a95-8441-c5f10f1cd4c8",
    "created_at": "2025-10-12T15:33:42.553765Z",
    "user_id": "user_33yE3LI8yux3dQNu00evvWeby6P",
    "subtasks": []
  },
  {
    "title": "Create Transaction Management Components",
    "description": "Develop interactive components for adding, editing, and managing portfolio transactions with support for different asset types and transaction methods",
    "details": "Build comprehensive transaction management UI components: 1) `AddTransactionDialog` component using shadcn/ui Dialog with form fields for asset selection, transaction type, quantity, price, and date. Include asset type-specific validation and UI elements. 2) `EditTransactionDialog` for modifying existing transactions. 3) `AssetDetailView` component showing individual asset holdings with lot-based information for precious metals and FIFO details for funds. 4) `SellAssetDialog` with special logic for precious metals (allowing lot selection) and funds (FIFO method). 5) Form validation using react-hook-form and Zod schemas. 6) Integration with the portfolio API endpoints. 7) Success/error notifications using toast components. All components should be fully accessible and follow the existing design system.",
    "status": "pending",
    "test_strategy": "Test form validation with various input scenarios, verify asset type-specific behavior, test API integration, validate accessibility compliance, and ensure proper error handling and user feedback",
    "priority": "medium",
    "ordinal": 3,
    "task_group_id": "5e8652bd-04a5-498c-8252-713c4420f3ba",
    "parent_task_id": null,
    "ai_result": null,
    "id": "a879ad14-df3d-4aee-86e8-be2f4dfb9374",
    "created_at": "2025-10-12T15:26:27.068152Z",
    "user_id": "user_33yE3LI8yux3dQNu00evvWeby6P",
    "subtasks": []
  },
  {
    "title": "Create interactive UI components for transaction management",
    "description": "Build reusable React components using shadcn/ui for adding, viewing, and managing portfolio transactions with proper form validation and user experience.",
    "details": "Develop components in components/portfolio/: 1) AddTransactionDialog.tsx - modal form for adding buy/sell transactions with asset type selection, quantity/price inputs, and date picker 2) AssetsTable.tsx - data table showing all assets with current values, quantities, and profit/loss 3) TransactionHistory.tsx - detailed view of all transactions with filtering and sorting 4) AssetDetailView.tsx - drill-down view showing individual lots/transactions for specific assets 5) PortfolioSummaryCards.tsx - dashboard cards showing total value, daily change, and key metrics. Implement proper form validation using react-hook-form and Zod, add loading states, error handling, and responsive design. Include asset type-specific logic (show lot selection for precious metals, FIFO indication for funds).",
    "status": "pending",
    "test_strategy": "Create component tests using React Testing Library, test form validation and submission, verify proper data display and formatting, and test responsive behavior across different screen sizes.",
    "priority": "medium",
    "ordinal": 3,
    "task_group_id": "37feadab-f40a-4295-987d-6837d37e03a9",
    "parent_task_id": null,
    "ai_result": null,
    "id": "137dc94f-fc26-43f5-a0e0-1d52a90d4b90",
    "created_at": "2025-10-12T15:33:42.553767Z",
    "user_id": "user_33yE3LI8yux3dQNu00evvWeby6P",
    "subtasks": []
  },
  {
    "title": "Integrate portfolio functionality into dashboard with performance charts",
    "description": "Transform the static dashboard page into a dynamic portfolio overview with real-time data, performance charts, and interactive features for comprehensive portfolio tracking.",
    "details": "Update app/dashboard/page.tsx to: 1) Fetch user's portfolio data server-side using the new API endpoints 2) Display portfolio summary cards with total value, daily/weekly performance, and asset allocation 3) Integrate performance charts using the existing chart component to show daily and weekly returns as bar charts 4) Add asset overview table with drill-down capability 5) Include quick action buttons for adding transactions 6) Implement real-time updates when transactions are added/modified 7) Add currency toggle (TRY/USD) for portfolio display 8) Ensure proper loading states and error handling. Use Next.js server components for initial data loading and client components for interactive features.",
    "status": "pending",
    "test_strategy": "Test server-side data fetching, verify chart rendering with real portfolio data, test interactive features like adding transactions, and ensure proper error states when API calls fail.",
    "priority": "medium",
    "ordinal": 4,
    "task_group_id": "37feadab-f40a-4295-987d-6837d37e03a9",
    "parent_task_id": null,
    "ai_result": null,
    "id": "ad0bc26c-1c59-4d04-962a-cbe53385db0d",
    "created_at": "2025-10-12T15:33:42.553769Z",
    "user_id": "user_33yE3LI8yux3dQNu00evvWeby6P",
    "subtasks": []
  }
]